int longestBeautifulSubstring(string word) {
    int n = word.length();
    if(n == 0){
        return 0;
    }
    
    unordered_map<char, int> mp;
    mp['a'] = 0;
    mp['e'] = 1;
    mp['i'] = 2;
    mp['o'] = 3;
    mp['u'] = 4;
    
    int ans = 0;
    int count = 1;
    unordered_set<char> visited;
    visited.insert(word[0]);
    
    for(int i=1; i<n; i++){
        if((mp[word[i]] - mp[word[i-1]]) >= 0 && (mp[word[i]] - mp[word[i-1]]) <= 1){
            visited.insert(word[i]);
            count++;
            bool flag = true;
            
            if(word[i] == 'u'){
                for(auto itr: mp){
                    if(visited.find(itr.first) == visited.end()){
                        flag = false;
                        break;
                    }
                }

                if(flag){
                    ans = max(ans, count);
                }
            }
                
        }
        else{
            visited.clear();
            visited.insert(word[i]);
            count = 1;
        }
    }
    
    return ans;
}
