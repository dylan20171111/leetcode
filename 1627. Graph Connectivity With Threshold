class Solution {
public:
    int find(int key, vector<int> & UF){
        if(UF[key] != key){
            UF[key] = find(UF[key], UF); 
        }
        return UF[key]; 
    }
    vector<bool> areConnected(int n, int threshold, vector<vector<int>>& queries) {
        vector<int> UF(n+1);
        for(int i=0; i<n ; i++) UF[i+1] =  i+1 ; 
        for (int i = max(1,threshold); i <= n; i++)
            for (int j = i * 2; j <= n; j += i)
                if (i > threshold){
                    int p1 = find(i, UF); 
                    int p2 = find(j, UF); 
                    UF[p2] =  p1; 
                }
        vector<bool> res(queries.size(), false); 
        int i=0; 
        for(auto x:queries){
            if(find(UF[x[0]], UF)== find(UF[x[1]], UF)) res[i] = true; 
            i++; 
        }
        return res; 
    }
};
